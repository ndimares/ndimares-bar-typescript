/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type BadRequestData = {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;
};

export class BadRequest extends Error {
    /**
     * HTTP status code
     */
    statusCode?: number | undefined;
    /**
     * Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
     */
    error?: string | undefined;
    /**
     * The type of error returned
     */
    typeName?: string | undefined;

    /** The original data that was passed to this error instance. */
    data$: BadRequestData;

    constructor(err: BadRequestData) {
        super("");
        this.data$ = err;

        if (err.statusCode != null) {
            this.statusCode = err.statusCode;
        }
        if (err.error != null) {
            this.error = err.error;
        }
        if (err.typeName != null) {
            this.typeName = err.typeName;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "BadRequest";
    }
}

/** @internal */
export namespace BadRequest$ {
    export const inboundSchema: z.ZodType<BadRequest, z.ZodTypeDef, unknown> = z
        .object({
            status_code: z.number().optional(),
            error: z.string().optional(),
            type_name: z.string().optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                status_code: "statusCode",
                type_name: "typeName",
            });

            return new BadRequest(remapped);
        });

    export type Outbound = {
        status_code?: number | undefined;
        error?: string | undefined;
        type_name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BadRequest> = z
        .instanceof(BadRequest)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    statusCode: z.number().optional(),
                    error: z.string().optional(),
                    typeName: z.string().optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        statusCode: "status_code",
                        typeName: "type_name",
                    });
                })
        );
}
