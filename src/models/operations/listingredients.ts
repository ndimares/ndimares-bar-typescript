/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type ListIngredientsRequest = {
    /**
     * A list of ingredients to filter by. If not provided all ingredients will be returned.
     */
    ingredients?: Array<string> | undefined;
};

export type ListIngredientsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of ingredients.
     */
    ingredients?: Array<components.Ingredient> | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace ListIngredientsRequest$ {
    export const inboundSchema: z.ZodType<ListIngredientsRequest, z.ZodTypeDef, unknown> = z.object(
        {
            ingredients: z.array(z.string()).optional(),
        }
    );

    export type Outbound = {
        ingredients?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListIngredientsRequest> =
        z.object({
            ingredients: z.array(z.string()).optional(),
        });
}

/** @internal */
export namespace ListIngredientsResponse$ {
    export const inboundSchema: z.ZodType<ListIngredientsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Ingredients: z.array(components.Ingredient$.inboundSchema).optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Ingredients: "ingredients",
                Error: "error",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Ingredients?: Array<components.Ingredient$.Outbound> | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListIngredientsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            ingredients: z.array(components.Ingredient$.outboundSchema).optional(),
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                ingredients: "Ingredients",
                error: "Error",
            });
        });
}
