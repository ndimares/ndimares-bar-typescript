/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export const ListDrinksServerList = [
    "https://speakeasy.bar",
    "https://test.speakeasy.bar",
] as const;

export type ListDrinksSecurity = {
    bearerAuth?: string | undefined;
};

export type ListDrinksRequest = {
    /**
     * The type of drink to filter by. If not provided all drinks will be returned.
     */
    drinkType?: components.DrinkType | undefined;
};

export type ListDrinksResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of drinks.
     */
    drinks?: Array<components.Drink> | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace ListDrinksSecurity$ {
    export const inboundSchema: z.ZodType<ListDrinksSecurity, z.ZodTypeDef, unknown> = z.object({
        bearerAuth: z.string().optional(),
    });

    export type Outbound = {
        bearerAuth?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksSecurity> = z.object({
        bearerAuth: z.string().optional(),
    });
}

/** @internal */
export namespace ListDrinksRequest$ {
    export const inboundSchema: z.ZodType<ListDrinksRequest, z.ZodTypeDef, unknown> = z.object({
        drinkType: components.DrinkType$.inboundSchema.optional(),
    });

    export type Outbound = {
        drinkType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksRequest> = z.object({
        drinkType: components.DrinkType$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace ListDrinksResponse$ {
    export const inboundSchema: z.ZodType<ListDrinksResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Drinks: z.array(components.Drink$.inboundSchema).optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Drinks: "drinks",
                Error: "error",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Drinks?: Array<components.Drink$.Outbound> | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            drinks: z.array(components.Drink$.outboundSchema).optional(),
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                drinks: "Drinks",
                error: "Error",
            });
        });
}
