/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type LoginSecurity = {
    username: string;
    password: string;
};

export enum Type {
    ApiKey = "apiKey",
    Jwt = "JWT",
}

export type LoginRequestBody = {
    type: Type;
};

/**
 * The api key to use for authenticated endpoints.
 */
export type LoginResponseBody = {
    token?: string | undefined;
};

export type LoginResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The api key to use for authenticated endpoints.
     */
    object?: LoginResponseBody | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace LoginSecurity$ {
    export const inboundSchema: z.ZodType<LoginSecurity, z.ZodTypeDef, unknown> = z
        .object({
            Username: z.string(),
            Password: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                Username: "username",
                Password: "password",
            });
        });

    export type Outbound = {
        Username: string;
        Password: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginSecurity> = z
        .object({
            username: z.string(),
            password: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                username: "Username",
                password: "Password",
            });
        });
}

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace LoginRequestBody$ {
    export const inboundSchema: z.ZodType<LoginRequestBody, z.ZodTypeDef, unknown> = z.object({
        type: Type$.inboundSchema,
    });

    export type Outbound = {
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginRequestBody> = z.object({
        type: Type$.outboundSchema,
    });
}

/** @internal */
export namespace LoginResponseBody$ {
    export const inboundSchema: z.ZodType<LoginResponseBody, z.ZodTypeDef, unknown> = z.object({
        token: z.string().optional(),
    });

    export type Outbound = {
        token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginResponseBody> = z.object({
        token: z.string().optional(),
    });
}

/** @internal */
export namespace LoginResponse$ {
    export const inboundSchema: z.ZodType<LoginResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => LoginResponseBody$.inboundSchema).optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Error: "error",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: LoginResponseBody$.Outbound | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => LoginResponseBody$.outboundSchema).optional(),
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                error: "Error",
            });
        });
}
