/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDrinkRequest = {
    name: string;
};

export type GetDrinkResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A drink.
     */
    drink?: components.Drink | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace GetDrinkRequest$ {
    export const inboundSchema: z.ZodType<GetDrinkRequest, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDrinkRequest> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });
}

/** @internal */
export namespace GetDrinkResponse$ {
    export const inboundSchema: z.ZodType<GetDrinkResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Drink: components.Drink$.inboundSchema.optional(),
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Drink === undefined ? null : { drink: v.Drink }),
                ...(v.Error === undefined ? null : { error: v.Error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Drink?: components.Drink$.Outbound | undefined;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDrinkResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            drink: components.Drink$.outboundSchema.optional(),
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.drink === undefined ? null : { Drink: v.drink }),
                ...(v.error === undefined ? null : { Error: v.error }),
            };
        });
}
