/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum Webhook {
    StockUpdate = "stockUpdate",
}

export type RequestBody = {
    url?: string | undefined;
    webhook?: Webhook | undefined;
};

export type SubscribeToWebhooksResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace Webhook$ {
    export const inboundSchema = z.nativeEnum(Webhook);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RequestBody$ {
    export const inboundSchema: z.ZodType<RequestBody, z.ZodTypeDef, unknown> = z
        .object({
            url: z.string().optional(),
            webhook: Webhook$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        webhook?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBody> = z
        .object({
            url: z.string().optional(),
            webhook: Webhook$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
            };
        });
}

/** @internal */
export namespace SubscribeToWebhooksResponse$ {
    export const inboundSchema: z.ZodType<SubscribeToWebhooksResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Error === undefined ? null : { error: v.Error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscribeToWebhooksResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.error === undefined ? null : { Error: v.error }),
            };
        });
}
