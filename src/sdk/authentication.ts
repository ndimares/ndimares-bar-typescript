/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { SecurityInput } from "../lib/security.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";

export class Authentication extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Authenticate with the API by providing a username and password.
     */
    async login(
        request: operations.LoginRequestBody,
        security: operations.LoginSecurity,
        options?: RequestOptions
    ): Promise<operations.LoginResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.LoginRequestBody$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/authenticate")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    type: "http:basic",
                    value: { username: security?.username, password: security?.password },
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = { operationID: "login", oAuth2Scopes: [], securitySource: security$ };

        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.LoginResponse>()
            .json(200, operations.LoginResponse$, { key: "object" })
            .fail([401, "4XX"])
            .json("5XX", errors.APIError$, { err: true })
            .json("default", operations.LoginResponse$, { key: "Error" })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
